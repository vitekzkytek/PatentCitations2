install.packages("rscopus")
library(rscopus)
generic_elsevier_api(query = "ISSN(0959-8278)",type = "article")
article_retrieval("ISSN(0959-8278)",identifier = "",api_key=api_key)
generic_elsevier_api(query = "ISSN(0959-8278)",type = "article",api_key=api_key)
api_key="e3fd43198781e92e0e07b7f543064003"
generic_elsevier_api(query = "ISSN(0959-8278)",type = "article",api_key=api_key)
install.packages("xml2")
library(xml2)
generic_elsevier_api(query = "ISSN(0959-8278)",type = "article",api_key=api_key)
result = generic_elsevier_api(query = "ISSN(0959-8278)",type = "article",api_key=api_key)
result$content
result = generic_elsevier_api(query = "ISSN(0959-8278)",type = "article",api_key=api_key,search_type = "scopus")
result = generic_elsevier_api(query = "ISSN(0959-8278)",type = "scopus",api_key=api_key,search_type = "scopus")
result = generic_elsevier_api(query = "ISSN(0959-8278)",type = "search",api_key=api_key,search_type = "scopus")
result$content
result = generic_elsevier_api(query = "ISSN(0959-8278)",type = "search",api_key=api_key,search_type = "scopus")
article_retrieval("ISSN(0959-8278)",identifier = "",api_key=api_key)
result$content
result$content[1]
result$content$`search-results`$entry[1]
install.packages("oaiharvester")
install.packages("OAIHarvester")
library(OAIHarvester)
baseurl <- "http://epub.wu.ac.at/cgi/oai2"
x <- oaih_identify(baseurl)
rbind(x, deparse.level = 0)
result$headers
result$get_statement$headers$`content-length`
int(result$get_statement$headers$`content-length`)
as.numeric(result$get_statement$headers$`content-length`)
df = data.frame()
df$issn = issn
issn = "0959-8278"
df$issn = issn
df$issn[1] = issn
for (res in result$content$`search-results`))
{
print(res$`prism:issn`)
}
for (res in result$content$`search-results`)
{
print(res$`prism:issn`)
}
print(res)
for (res in result$content$`search-results`)
{
print(res)
}
for (res in result$content$`search-results`)
{
print(res$`prism:publicationName`)
}
for (res in result$content$`search-results`)
{
print(res[`prism:publicationName`])
}
searchResults = result$content$`search-results`
searchResults = result$content$`search-results`
for (res in searchResults)
{
print(searchResults[res]$`prism:publicationName`)
}
for (res in searchResults)
{
print(searchResults[[res]]$`prism:publicationName`)
}
print(result$content$`search-results`$`opensearch:totalResults`)
result$content$`search-results`
for (res in result$content$`search-results`)
{
print(result$content$`search-results`$entry[[res]]$`prism:publicationName`)
}
print(result$content$`search-results`$entry[[1]]$`prism:publicationName`)
print(result$content$`search-results`$entry[[2]]$`prism:publicationName`)
for (res in 1:as.numeric(result$content$`search-results`$`opensearch:totalResults))
{
print(result$content$`search-results`$entry[[res]]$`prism:publicationName`)
}
result$content$`search-results`
result$content$`search-results`$entry[[1]]$`prism:publicationName`
for (res in 1:as.numeric(result$content$`search-results`$`opensearch:totalResults))
{
print(result$content$`search-results`$entry[[res]]$`prism:publicationName`)
}
1:as.numeric(result$content$`search-results`$`opensearch:totalResults)
1
dfd
gdghhrjhj ] 2
1:4
as.numeric(result$content$`search-results`$`opensearch:totalResults)
)
)
)
)
)
)
result$content$`search-results`$`opensearch:totalResults
1:as.numeric(result$content$`search-results`$`opensearch:totalResults`
)
for (res in 1:as.numeric(result$content$`search-results`$`opensearch:totalResults`))
{
print(result$content$`search-results`$entry[[res]]$`prism:publicationName`)
}
for (res in 1:as.numeric(result$content$`search-results`$`opensearch:totalResults`))
{
print(result$content$`search-results`$entry[[res]]$`dc:title`)
}
q()
y <- ts(rnorm(120,0,3) + 1:120 + 20*sin(2*pi*(1:120)/12), frequency=12)
fit <- tslm(y ~ trend + season)
plot(forecast(fit, h=20))
install.packages('forecast')
y <- ts(rnorm(120,0,3) + 1:120 + 20*sin(2*pi*(1:120)/12), frequency=12)
fit <- tslm(y ~ trend + season)
plot(forecast(fit, h=20))
library(forecast)
y <- ts(rnorm(120,0,3) + 1:120 + 20*sin(2*pi*(1:120)/12), frequency=12)
fit <- tslm(y ~ trend + season)
plot(forecast(fit, h=20))
?tslm
set.seed(1)
x=matrix(rnorm(20*2), ncol=2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,] + 1
x
y
plot(x, col=(3-y))
dat=data.frame(x=x, y=as.factor(y))
library(e1071)
install.packages("e1071")
svmfit=svm(y~., data=dat, kernel="linear", cost=10,scale=FALSE)
svmfit=svm(y~., data=dat, kernel="linear", cost=10,scale=FALSE)
#zoom
#IMPORT EXCEL
library(readxl)
#IMPORT EXCEL
library(readxl)
getcwd()
setwd("D:/Dropbox/Hugo/Patenty")
install.packages(readxl)
install.packages("readxl")
install.packages("jsonlite")
library(data.table)
install.packages("data.table")
#IMPORT EXCEL
library(readxl)
patents <- read_excel("180917_Data_VitekPaulina.xlsx",  skip = 1)
View(patents)
patents$kategorie2 = patents$kategorie
patents$ID <- seq.int(nrow(patents))
library(data.table)
dt <- as.data.table(patents)
View(dt)
#podla kategorie
dt_split1 <- split(dt, by=c("kategorie2", "children"), keep.by=F, flatten=FALSE)
rep(1,nrow(patents))
rep(T,nrow(patents))
View(dt)
colnames(dt)
colnames(dt)[2] = "text"
View(dt)
# SELECT2 JSON
#IMPORT EXCEL
library(readxl)
patents <- read_excel("180917_Data_VitekPaulina.xlsx",  skip = 1)
patents$ID <- seq.int(nrow(patents))
patents$level <- rep(1,nrow(patents))
patents$displayed <- rep(T,nrow(patents))
library(data.table)
dt <- as.data.table(patents)
colnames(dt)[2] = "text"
View(dt)
# SELECT2 JSON
#IMPORT EXCEL
library(readxl)
patents <- read_excel("180917_Data_VitekPaulina.xlsx",  skip = 1)
patents$ID <- seq.int(nrow(patents))
patents$level <- rep(1,nrow(patents))
patents$displayed <- rep(T,nrow(patents))
library(data.table)
dt <- as.data.table(patents)
colnames(dt)[2] = "text"
View(dt)
#podla kategorie
dt_split1 <- split(dt, by=c("kategorie2", "children"), keep.by=F, flatten=FALSE)
s = toJSON(dt,dataframe='columns',pretty=T,encoding="UTF-8")
library(jsonlite)
s = toJSON(dt,dataframe='columns',pretty=T,encoding="UTF-8")
s
s = toJSON(dt,dataframe='rows',pretty=T,encoding="UTF-8")
s
s = toJSON(dt,dataframe='rows',pretty=F,encoding="UTF-8")
s
# SELECT2 JSON
#IMPORT EXCEL
library(readxl)
patents <- read_excel("180917_Data_VitekPaulina.xlsx",  skip = 1)
patents$id <- seq.int(nrow(patents))
patents$level <- rep(1,nrow(patents))
patents$displayed <- rep(T,nrow(patents))
library(data.table)
dt <- as.data.table(patents)
colnames(dt)[2] = "text"
library(jsonlite)
s = toJSON(dt,dataframe='rows',pretty=F,encoding="UTF-8")
s
s
